{"version":3,"sources":["components/MemoryCard.js","components/ScoreBoard.js","App.js","index.js"],"names":["MemoryCard","props","insects","card","map","item","index","randomNum","Math","floor","random","url","className","id","name","onClick","handleClick","src","alt","v4","ScoreBoard","style","color","backgroundColor","useState","transition","setTransition","useEffect","timeout","setTimeout","clearTimeout","bestScore","score","App","selectedCards","setSelection","setScore","setBestScore","setLog","message","setMessage","textAlign","lineHeight","borderRadius","width","margin","event","items","target","loggedItem","reduce","obj","count","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87c0cf68.chunk.js","sourcesContent":["import { v4 } from 'uuid';\n\nfunction MemoryCard(props) {\n    let insects = ['Assassin Bug', 'Bed Bug', 'Madagascar Hissing Cockroach', 'Forest Caterpillar Hunter',\n        'Ground Beetle', 'Flat Bark Beetle', 'Scarab Beetle', 'Ladybird Beetle', 'Seed Beetle',\n        'Harnessed Moth', 'Monarch Butterfly', 'Io Moth', 'Horse Fly', 'Syrphid Fly', 'Long Horn Beetle',\n        'Atlas Moth', 'Velvet Ant', 'Rainbow Scarab', 'New Guinea Walking Stick', 'Eastern Cicada Killer',\n        'Elm Sawfly', 'Giant Swallowtail', 'Cynthia Moth', 'Question Mark', 'Dead Leaf Mantis',\n        'Sunset Moth', 'Brush Footed Butterfly', 'Atlas Beetle', 'Treehopper', 'Oblong Winged Katydid',\n        'Seed Bug', 'Frog Legged Leaf Beetle', 'Owl Butterfly', 'Halloween Pennant', 'Potter Wasp',\n        'King Swallowtail', 'Metallic Green Bee', 'Weevil', 'Jewel Scarab', 'Giant Grasshopper']\n\n\n    const card = insects.map((item, index) => {\n        let randomNum = Math.floor(Math.random() * 40)\n        var url = \"img/\" + insects[randomNum] + \".jpg\";\n        return (\n            <div>\n                {index < 12 ?\n                    <div className=\"card\" id={randomNum} name={insects[randomNum]} key={v4()} onClick={props.handleClick}>\n                        <img src={url} alt={insects[randomNum]} name={insects[randomNum]} />\n                        <p className=\"img-text\" name={insects[randomNum]}>{insects[randomNum]} </p>\n                    </div>\n                    : null\n                }\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"card-container\" key={v4()}>\n            {card}\n        </div>\n    );\n}\n\nexport default MemoryCard;","import { useState, useEffect } from 'react';\n\nfunction ScoreBoard(props) {\n  const style = {\n    color: \"red\",\n    backgroundColor: \"black\"\n  }\n  let [transition, setTransition] = useState(style);\n  \n//highlight best score when losing game\n  useEffect(() => {\n    setTransition(style)\n    const timeout = setTimeout(() => {\n      setTransition(null)\n    }, 1500)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [props.bestScore])\n\n  return (\n    <div className=\"score\">\n      <h3>Score: {props.score}</h3>\n      <h3 style={transition}>Best Score: {props.bestScore}</h3>\n    </div>\n  );\n}\n\nexport default ScoreBoard;","import './style/App.css';\nimport MemoryCard from './components/MemoryCard'\nimport ScoreBoard from './components/ScoreBoard'\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [selectedCards, setSelection] = useState([]);\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [log, setLog] = useState({});\n  const [message, setMessage] = useState();\n\n  function handleClick(event) {\n    let items = [...selectedCards, event.target.name]\n\n    //log count \n    let loggedItem = items.reduce((obj, item) => {\n      if (!obj[item]) {\n        obj[item] = 0;\n      }\n      obj[item]++;\n      return obj;\n    }, {})\n\n    //update score and best score\n    let count = 0;\n    for (let item in loggedItem) {\n      if (loggedItem[item] > 1) {\n        setSelection([]);\n        setLog({});\n        if (bestScore < score) {\n          setBestScore(score)\n        }\n        loggedItem = {};\n        count = 0;\n        items = [];\n      } else {\n        count++;\n      }\n      setScore(count);\n    }\n    setLog(loggedItem);\n    setSelection(items)\n  }\n// show message when losing game\n  useEffect(() => {\n    setMessage(\"Opps you have clicked this before. You scored \" + score + \" points !\")\n    const timeout = setTimeout(() => {\n      setMessage(null)\n    }, 1500)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [bestScore])\n\n//mount initial message\n  useEffect(() => {\n    setMessage(\"Let's get started !!!\")\n    const timeout = setTimeout(() => {\n      setMessage(null)\n    }, 1200)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n//style of message\n  const textStyle = {\n    textAlign: \"center\",\n    backgroundColor: 'black',\n    color: \"red\",\n    lineHeight: \"220%\",\n    borderRadius: \"10px\",\n    width: \"50%\",\n    margin: \"auto\"\n  }\n  return (\n    <div className=\"App\">\n      <header>\n        <div>\n          <h1>Insects Memory Challenge</h1>\n          <p>How well can you recognize and remember insects?</p>\n          <p >Get points by clicking on insects but don't click on any more than once!</p>\n        </div>\n        <ScoreBoard score={score} bestScore={bestScore} />\n      </header>\n      <p style={textStyle}>{message}</p>\n      <MemoryCard bestScore={bestScore} handleClick={handleClick} />\n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}